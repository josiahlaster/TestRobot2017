// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drivebasesubfrontLeftSpark;
std::shared_ptr<SpeedController> RobotMap::drivebasesubfrontRightSpark;
std::shared_ptr<SpeedController> RobotMap::drivebasesubbacktLeftSpark;
std::shared_ptr<SpeedController> RobotMap::drivebasesubbackRightSpark;
std::shared_ptr<RobotDrive> RobotMap::drivebasesubRobotDrive;
std::shared_ptr<SpeedController> RobotMap::shooterSubsystemShooterSpark;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //LiveWindow *lw = LiveWindow::GetInstance();

    drivebasesubfrontLeftSpark.reset(new Spark(0));
    //lw->AddActuator("Drive base sub", "frontLeftSpark", std::static_pointer_cast<Spark>(drivebasesubfrontLeftSpark));
    
    drivebasesubfrontRightSpark.reset(new Spark(1));
    //lw->AddActuator("Drive base sub", "frontRightSpark", std::static_pointer_cast<Spark>(drivebasesubfrontRightSpark));
    
    drivebasesubbacktLeftSpark.reset(new Spark(2));
    //lw->AddActuator("Drive base sub", "backtLeftSpark", std::static_pointer_cast<Spark>(drivebasesubbacktLeftSpark));
    
    drivebasesubbackRightSpark.reset(new Spark(3));
    //lw->AddActuator("Drive base sub", "backRightSpark", std::static_pointer_cast<Spark>(drivebasesubbackRightSpark));
    
    drivebasesubRobotDrive.reset(new RobotDrive(drivebasesubfrontLeftSpark, drivebasesubbacktLeftSpark,
              drivebasesubfrontRightSpark, drivebasesubbackRightSpark));
    
    drivebasesubRobotDrive->SetSafetyEnabled(false);
        drivebasesubRobotDrive->SetExpiration(0.1);
        drivebasesubRobotDrive->SetSensitivity(0.5);
        drivebasesubRobotDrive->SetMaxOutput(1.0);

    shooterSubsystemShooterSpark.reset(new Spark(4));
    //lw->AddActuator("Shooter Subsystem", "ShooterSpark", std::static_pointer_cast<Spark>(shooterSubsystemShooterSpark));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
